<?xml version="1.0" encoding="UTF-8" standalone="no"?><xs:schema xmlns="http://www.tmaxsoft.com/xml/ns/jeus" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="8.5">

    <xs:complexType name="webSocketType">
        <xs:sequence>
            <xs:element default="8192" minOccurs="0" name="max-incoming-binary-message-buffer-size" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트로부터 전달되는 바이너리 메시지를 버퍼링할 때 사용하는 버퍼의 최대값을 의미한다.
                        여기에 설정된 값은 javax.websocket.WebSocketContainer.getDefaultMaxBinaryMessageBufferSize()에서 리턴된다.
                        여기에 설정된 값보다 큰 메시지가 전달되는 경우 1009 에러를 내고 WebSocket Session을 닫는다.
                        만약 0일 경우에는 메시지를 그냥 버린다.
						[Label]: Max Incoming Binary Message Buffer Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="8192" minOccurs="0" name="max-incoming-text-message-buffer-size" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트로부터 전달되는 텍스트 메시지를 버퍼링할 때 사용하는 버퍼의 최대값을 의미한다.
                        여기에 설정된 값은 javax.websocket.WebSocketContainer.getDefaultMaxTextMessageBufferSize()에서 리턴된다.
                        여기에 설정된 값보다 큰 메시지가 전달되는 경우 1009 에러를 내고 WebSocket Session을 닫는다.
                        만약 0일 경우에는 메시지를 그냥 버린다.
						[Label]: Max Incoming Text Message Buffer Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="1800000" minOccurs="0" name="max-session-idle-timeout-in-millis" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 유휴 상태의 WebSocket 세션을 언제 닫을 것인지 결정하는 값이다.
                        기본값은 HTTP 세션 타임아웃과 마찬가지로 30분이다.
                        여기에 설정된 값은 javax.websocket.WebSocketContainer.getDefaultMaxSessionIdleTimeout()에서 리턴된다.
                        만약 0보다 크고 1000보다 작을 경우에는 무조건 1000으로 취급한다.
                        [Value Description]: 밀리세컨드 단위
						[Label]: Max Session Idle Timeout In Millis
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="300000" minOccurs="0" name="monitoring-period-in-millis" type="positiveLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebSocket 세션 타임아웃 여부 등을 체크하기 위한 주기를 설정한다. 기본값은 5분이다.
                        만약 1000보다 작을 경우에는 무조건 1000으로 취급한다.
                        [Value Description]: 밀리세컨드 단위
						[Label]: Monitoring Period In Millis
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="10000" minOccurs="0" name="blocking-send-timeout-in-millis" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Synchronous Send을 사용하는 경우 얼마만큼 기다릴지 결정하는 값이다.
                        타임아웃이 발생하는 경우 관련 에러를 담아서 IOException으로 처리한다.
                        기본값은 10초이다.
                        [Value Description]: 밀리세컨드 단위
						[Label]: Blocking Send Timeout In Millis
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="async-send-timeout-in-millis" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Asynchronous Send을 사용하는 경우 서버 상에서 보내지 못하고 있는 메시지에 대한 타임아웃을 나타낸다.
                        javax.websocket.WebSocketContainer.getDefaultAsyncSendTimeout()에서 리턴된다.
                        [Value Description]: 밀리세컨드 단위
						[Label]: Async Send Timeout In Millis
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="websocket-executor" type="webSocketExecutorType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebSocket Container 내부적으로 사용하는 쓰레드 풀 관련 설정이다.
                        주로 asynchronous send시 SendHandler를 처리하기 위해서 사용한다.
						[Label]: Websocket Executor
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="distributed-userProperties" type="distributedWebSocketUserPropertiesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: javax.websocket.Session.getUserProperties()에 정의된 내용에 따라 제공하는 WebSocket UserProperties Failover 관련 설정이다.
						[Label]: Distributed UserProperties
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="init-param" type="initParameterType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebSocket Container에서 사용하는 추가 설정을 나타낸다.
						[Label]: Init Param
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="webSocketExecutorType">
        <xs:sequence>
            <xs:element default="0" minOccurs="0" name="min" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Thread Pool에서 관리하는 스레드 수의 최솟값이다.
						[Label]: Min
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="30" minOccurs="0" name="max" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Thread Pool에서 관리하는 스레드 수의 최댓값이다.
                    [Default Value]: 기본값은 30개이다.
						[Label]: Max
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="60000" minOccurs="0" name="keep-alive-time" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Min을 초과하는 스레드에 대해서 설정된 시간 동안 사용되지 않는다면 자동적으로 Thread Pool에서 제거된다. 0이면 제거하지 않는다.
                    [Default Value]: 기본값은 1분이다.
                    [Value Description]: 밀리세컨드 단위로 설정한다.
						[Label]: Keep Alive Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="4096" minOccurs="0" name="queue-size" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Thread Pool이 처리하는 Task를 저장하는 Queue의 크기를 지정한다.
						[Label]: Queue Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="distributedWebSocketUserPropertiesType">
        <xs:sequence>
            <xs:element default="false" name="enabled" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: WebSocket Session Failover 사용 여부를 결정한다. HTTP Session과 연동해야 하기 때문에 기본적으로는 사용하지 않는다.
                    [Label]: Enabled
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="use-write-through-policy" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: WebSocket Session의 UserProperties에 put/remove할 때 백업 서버로의 동기화가 끝날 때까지 기다릴 것인지 그 여부를 선택한다.
                    기본적으로는 기다리지 않고 백그라운드에서 동기화가 일어나도록 한다.
                    [Label]: Use Write Through Policy
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="initParameterType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebSocket Container 환경 변수의 이름을 설정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebSocket Container 환경 변수에 사용되는 값을 설정한다.
						[Label]: Value
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


</xs:schema>
